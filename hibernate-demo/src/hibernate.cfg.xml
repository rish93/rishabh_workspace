<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later.
  ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
    
	       <!--database connection setting sql dialect -->
		    <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
		    <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/demo</property><!--mention ip if db is remotely located  --> 
		    <property name="hibernate.connection.username">root</property>
		    <property name="hibernate.connection.password">root</property>
   
	      <!-- jdbc connection pool (use the built-in) -->
	     <!--  --> <property name ="connection.pool_size">1</property>
	      
	      
	      <!--sql dialect -->
	   <!-- dialect is the configuration specidfied so that hibernate knows what language need to use to 
	   talk to database way we run queries in oracle is different than in mysql
	   since hibernate is writeing query for us it need to know which dialectto be used -->
	      <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        
        <!-- disable the second level cache -->
      <property name ="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>
      
      
      
      
      <!-- echo executed sql to stdout -->
      <!-- hibernate wil print out all the sql it generates -->
      <property name="show_sql">true</property>
        
        
        <!-- drop and recreate database schema on startup -->
        <!-- depending on what we configure model object its gonna create database schema to save those model object 
 depneding on what we configure model objects its gonna create databse schema to save those model objects
          we donot have to create table manuallyfor saving these objects. so set to create coz we donot have to do ourself
          
          We pass object to hibernate for saving object, hibernate will look at database to see if there is table to save these objects if there is not table hobernate will create table for us
          it will -->
              <property name="hbm2ddl.auto">create</property>
        
        
        
        <!-- names the annotated entity class -->
        <!-- list out all the model class we have configured here -->
        <mapping class="org.bitorder.hibernatedemo.dto.UserDetails"/>
        
        
       <!--  
        <property name="hibernate.cache.use_query_cache">true</property>
        <property name="hibernate.cache.region_prefix">hibernate.test</property>
        <property name="hibernate.jdbc.use_streams_for_binary">true</property>
        <property name="hibernate.jdbc.batch_size">0</property>
        <property name="hibernate.max_fetch_depth">3</property>
        <property name="hibernate.hbm2ddl.auto">create-drop</property>
        <property name="hibernate.generate_statistics">true</property>
        <property name="test-assertable-setting">value</property>
        <property name="hibernate.cache.region.factory_class">org.hibernate.testing.cache.CachingRegionFactory</property>
     
	      <mapping class="test.person" file="" jar="" package="" resource="person.hbm.xml"/>
	      <mapping class="org.hibernate.osgi.test.client.DataPoint"/>
        <mapping class="org.hibernate.osgi.test.client.AuditedDataPoint"/>
      
        <mapping class="org.hibernate.jpa.test.Item"/>
        <mapping class="org.hibernate.jpa.test.Cat"/>
        <mapping class="org.hibernate.jpa.test.Kitten"/>
        <mapping class="org.hibernate.jpa.test.Distributor"/>
        <class-cache class="org.hibernate.jpa.test.Item" usage="read-write"/>
        <collection-cache collection="org.hibernate.jpa.test.Item.distributors" usage="read-write" region="RegionName"/>
        <event type="pre-insert"/> -->
    </session-factory>
</hibernate-configuration>