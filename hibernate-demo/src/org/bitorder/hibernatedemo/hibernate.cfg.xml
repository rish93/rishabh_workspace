<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later.
  ~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
    
	       <!--database connection setting sql dialect -->
		    <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
		    <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/demo</property>
		    <property name="hibernate.connection.username">root</property>
		    <property name="hibernate.connection.password">root</property>
   
	      <!-- jdbc connection pool (use the built-in) -->
	      <property name ="connection.pool_size">1</property>
	      
	      <!--sql dialect -->
	      <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        
        <!-- disable the second level cache -->
      <property name ="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>
      
      <property name="hibernate.enable_lazy_load_no_trans">true</property>
      
      
      
      <!-- echo executed sql to stdout for console display-->
      <property name="show_sql">true</property>
        
        
        <!-- drop and recreate database schema on startup -->
              <property name="hbm2ddl.auto">update</property>
        <!-- to retain the schema use update -->
        <!-- e.g. validate | update | create | create-drop
So the list of possible options are,

validate: validate the schema, makes no changes to the database.
update: update the schema.
create: creates the schema, destroying previous data.
create-drop: drop the schema when the SessionFactory is closed explicitly, typically when the application is stopped. -->
        
        <!-- names the annotated entity class -->
        <mapping class="org.bitorder.hibernatedemo.dto.UserDetails"/>
        <mapping class="org.bitorder.hibernatedemo.dto.OneToOneVehicle"/>
        <mapping class="org.bitorder.hibernatedemo.dto.OneToOneMapping"/>
        <mapping class="org.bitorder.hibernatedemo.dto.OneToManyMapping"/>
		<mapping class="org.bitorder.hibernatedemo.dto.OneToManyVehicle"/>
 
 
 		<mapping class="org.bitorder.hibernatedemo.dto.ManyToManyUserDetailClass"/>
 		<mapping class="org.bitorder.hibernatedemo.dto.ManyToManyVehicleListClass"/>
 
        <mapping class="org.bitorder.hibernatedemo.dto.CascadingUserClass"/>
 		<mapping class="org.bitorder.hibernatedemo.dto.CascadingVehicleClass"/>
 
 
		 <mapping class="org.bitorder.hibernatedemo.dto.TwoWheelerInheritenceClass"/>
		 <mapping class="org.bitorder.hibernatedemo.dto.FourWheelerInheritenceClass"/>
		 <mapping class="org.bitorder.hibernatedemo.dto.VehicleInheritenceClass"/>
		 
 
		 <mapping class="org.bitorder.hibernatedemo.dto.TwoWheelerInheritenceTablePerClass"/>
		 <mapping class="org.bitorder.hibernatedemo.dto.FourWheelerInheritenceTablePerClass"/>
		 <mapping class="org.bitorder.hibernatedemo.dto.VehicleInheritenceTablePerClass"/>
		 
 
 
  <mapping class="org.bitorder.hibernatedemo.dto.TwoWheelerInheritenceJoined"/>
		 <mapping class="org.bitorder.hibernatedemo.dto.FourWheelerInheritenceJoined"/>
		 <mapping class="org.bitorder.hibernatedemo.dto.VehicleInheritenceJoined"/>
	
	
	
	 <mapping class="org.bitorder.hibernatedemo.dto.CrudOperationClass"/>
	
	<mapping class="org.bitorder.hibernatedemo.dto.TransientPersistenceDetachedUserDetailsClass"/>
		
       <!--  
        <property name="hibernate.cache.use_query_cache">true</property>
        <property name="hibernate.cache.region_prefix">hibernate.test</property>
        <property name="hibernate.jdbc.use_streams_for_binary">true</property>
        <property name="hibernate.jdbc.batch_size">0</property>
        <property name="hibernate.max_fetch_depth">3</property>
        <property name="hibernate.hbm2ddl.auto">create-drop</property>
        <property name="hibernate.generate_statistics">true</property>
        <property name="test-assertable-setting">value</property>
        <property name="hibernate.cache.region.factory_class">org.hibernate.testing.cache.CachingRegionFactory</property>
     
	      <mapping class="test.person" file="" jar="" package="" resource="person.hbm.xml"/>
	      <mapping class="org.hibernate.osgi.test.client.DataPoint"/>
        <mapping class="org.hibernate.osgi.test.client.AuditedDataPoint"/>
      
        <mapping class="org.hibernate.jpa.test.Item"/>
        <mapping class="org.hibernate.jpa.test.Cat"/>
        <mapping class="org.hibernate.jpa.test.Kitten"/>
        <mapping class="org.hibernate.jpa.test.Distributor"/>
        <class-cache class="org.hibernate.jpa.test.Item" usage="read-write"/>
        <collection-cache collection="org.hibernate.jpa.test.Item.distributors" usage="read-write" region="RegionName"/>
        <event type="pre-insert"/> -->
    </session-factory>
</hibernate-configuration>